version: '3.8'

services:
  postgres_db:
    container_name: postgres_db
    image: postgres:17-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - '${POSTGRES_PORT}:5432'
    volumes:
      - ./postgres:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 2s
      timeout: 2s
      retries: 30
    restart: unless-stopped

  redis_db:
    container_name: redis_db
    image: redis:8-alpine3.22
    ports:
      - '${REDIS_PORT}:6379'
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 2s
      timeout: 2s
      retries: 30
    restart: unless-stopped

  backend_app:
    container_name: backend_app
    depends_on:
      postgres_db:
        condition: service_healthy
      redis_db:
        condition: service_healthy
    build:
      context: ./
      dockerfile: Dockerfile
    ports:
      - '${PORT}:${PORT}'
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: ${PORT}
      POSTGRES_HOST: postgres_db
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      REDIS_HOST: redis_db
      REDIS_PORT: ${REDIS_PORT}
      REDIS_DEFAULT_TTL: ${REDIS_DEFAULT_TTL}
    restart: unless-stopped
